<?php
$pageTitle = "Menu Makanan";
require_once 'includes/header.php';
require_once 'config/database.php';
require_once 'config/functions.php';
require_once 'role_permission_check.php';

// Fungsi untuk mendapatkan harga barang berdasarkan id_barang
function getHargaBarang($conn, $id_barang) {
    $query = "SELECT harga FROM barang WHERE id_barang = ?";
    $stmt = $conn->prepare($query);
    $stmt->bind_param("i", $id_barang);
    $stmt->execute();
    $result = $stmt->get_result();
    
    if ($result->num_rows > 0) {
        $row = $result->fetch_assoc();
        return $row['harga'];
    }
    
    return 0;
}

// Fungsi untuk mendapatkan data barang dari database
function getBarangData($conn) {
    $query = "SELECT id_barang, nama_barang, satuan, harga FROM barang ORDER BY nama_barang";
    $result = $conn->query($query);
    
    $barang_list = [];
    if ($result && $result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $barang_list[$row['id_barang']] = $row;
        }
    }
    
    return $barang_list;
}

// Fungsi untuk menghitung harga modal dari bahan-bahan
function hitungHargaModal($conn, $bahan_list) {
    $total = 0;
    $bahan_array = explode(',', $bahan_list);
    
    foreach ($bahan_array as $bahan_item) {
        // Format: nama_bahan:jumlah
        $item_parts = explode(':', trim($bahan_item));
        
        if (count($item_parts) >= 2) {
            $nama_bahan = trim($item_parts[0]);
            $jumlah = floatval(trim($item_parts[1]));
            
            // Cari id_barang berdasarkan nama
            $query = "SELECT id_barang, harga FROM barang WHERE nama_barang = ?";
            $stmt = $conn->prepare($query);
            $stmt->bind_param("s", $nama_bahan);
            $stmt->execute();
            $result = $stmt->get_result();
            
            if ($result->num_rows > 0) {
                $row = $result->fetch_assoc();
                $harga_satuan = $row['harga'];
                $total += $harga_satuan * $jumlah;
            }
        }
    }
    
    return $total;
}

// Fungsi untuk memformat angka ke format rupiah
function formatRupiah($angka) {
    return 'Rp ' . number_format($angka, 0, ',', '.');
}

// Pastikan folder uploads/menu ada
$uploadDir = 'uploads/menu/';
if (!file_exists($uploadDir)) {
    mkdir($uploadDir, 0777, true);
}

// Inisialisasi variabel
$id_menu = $nama_menu = $harga = $bahan = $deskripsi = $foto = '';
$harga_modal = $keuntungan = 0;
$errors = [];
$edit_mode = false;
$bahan_items = [];
$barang_list = getBarangData($conn);

// Create barangOptions variable with all available ingredients
const barangOptions = `
<?php 
// Loop through barang_list to create options
foreach ($barang_list as $id => $barang) {
    echo '<option value="' . $id . '" data-harga="' . $barang['harga'] . '" data-satuan="' . htmlspecialchars($barang['satuan']) . '">';
    echo htmlspecialchars($barang['nama_barang']) . ' (' . formatRupiah($barang['harga']) . '/' . htmlspecialchars($barang['satuan']) . ')';
    echo '</option>';
}
?>
`;

// Handle form submission untuk tambah/edit menu
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['submit_menu'])) {
    // Ambil data dari form
    $id_menu = isset($_POST['id_menu']) ? $_POST['id_menu'] : '';
    $nama_menu = trim($_POST['nama_menu']);
    $harga = trim($_POST['harga']);
    $bahan = trim($_POST['bahan']);
    $deskripsi = trim($_POST['deskripsi']);
    $kategori = 'makanan'; // Kategori tetap makanan
    $harga_modal = isset($_POST['harga_modal']) ? trim($_POST['harga_modal']) : 0;
    $keuntungan = isset($_POST['keuntungan']) ? trim($_POST['keuntungan']) : 0;
    
    // Validasi data
    if (empty($nama_menu)) {
        $errors[] = "Nama menu wajib diisi";
    }
    
    if (empty($harga) || !is_numeric($harga) || $harga <= 0) {
        $errors[] = "Harga harus berupa angka positif";
    }
    
    if (empty($bahan)) {
        $errors[] = "Bahan-bahan wajib diisi";
    }
    
    // Proses upload foto jika ada
    $foto_name = '';
    if (!empty($_FILES['foto']['name'])) {
        $foto_name = time() . '_' . basename($_FILES['foto']['name']);
        $foto_path = $uploadDir . $foto_name;
        $foto_tmp = $_FILES['foto']['tmp_name'];
        $foto_size = $_FILES['foto']['size'];
        $foto_ext = strtolower(pathinfo($foto_path, PATHINFO_EXTENSION));
        
        // Validasi ekstensi file
        $allowed_ext = ['jpg', 'jpeg', 'png', 'gif'];
        if (!in_array($foto_ext, $allowed_ext)) {
            $errors[] = "Format foto tidak didukung. Format yang diizinkan: JPG, JPEG, PNG, GIF";
        }
        
        // Validasi ukuran file (max 2MB)
        if ($foto_size > 2097152) {
            $errors[] = "Ukuran foto tidak boleh lebih dari 2MB";
        }
    }
    
    // Jika tidak ada error, simpan data
    if (empty($errors)) {
        try {
            $conn->begin_transaction();
            
            // Cek apakah tabel menu sudah ada, jika belum buat tabel
            $table_check = $conn->query("SHOW TABLES LIKE 'menu'");
            if ($table_check->num_rows == 0) {
                $create_table = "CREATE TABLE `menu` (
                    `id_menu` int(11) NOT NULL AUTO_INCREMENT,
                    `nama_menu` varchar(100) NOT NULL,
                    `kategori` enum('makanan','minuman') NOT NULL,
                    `harga` decimal(10,2) NOT NULL,
                    `bahan` text NOT NULL,
                    `deskripsi` text,
                    `foto` varchar(255) DEFAULT NULL,
                    `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                    PRIMARY KEY (`id_menu`)
                ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;";
                
                if (!$conn->query($create_table)) {
                    throw new Exception("Error creating menu table: " . $conn->error);
                }
            }
            
            // Upload foto jika ada
            if (!empty($_FILES['foto']['name'])) {
                if (!move_uploaded_file($foto_tmp, $foto_path)) {
                    throw new Exception("Gagal mengupload foto");
                }
                $foto = $foto_name;
            }
            
            if (!empty($id_menu)) {
                // Mode edit
                $query = "UPDATE menu SET nama_menu = ?, kategori = ?, harga = ?, bahan = ?, deskripsi = ?, harga_modal = ?, keuntungan = ?";
                
                // Jika ada foto baru, update juga field foto
                if (!empty($foto)) {
                    // Hapus foto lama jika ada
                    $get_old_foto = $conn->prepare("SELECT foto FROM menu WHERE id_menu = ?");
                    $get_old_foto->bind_param("i", $id_menu);
                    $get_old_foto->execute();
                    $old_foto_result = $get_old_foto->get_result();
                    
                    if ($old_foto_result->num_rows > 0) {
                        $old_foto = $old_foto_result->fetch_assoc()['foto'];
                        if (!empty($old_foto) && file_exists($uploadDir . $old_foto)) {
                            unlink($uploadDir . $old_foto);
                        }
                    }
                    
                    $query .= ", foto = ? WHERE id_menu = ?";
                    $stmt = $conn->prepare($query);
                    $stmt->bind_param("ssdssddsi", $nama_menu, $kategori, $harga, $bahan, $deskripsi, $harga_modal, $keuntungan, $foto, $id_menu);
                } else {
                    $query .= " WHERE id_menu = ?";
                    $stmt = $conn->prepare($query);
                    $stmt->bind_param("ssdssddi", $nama_menu, $kategori, $harga, $bahan, $deskripsi, $harga_modal, $keuntungan, $id_menu);
                }
                
                $action_msg = "Menu berhasil diupdate";
                $log_action = "Mengupdate menu makanan: $nama_menu";
            } else {
                // Mode tambah
                $query = "INSERT INTO menu (nama_menu, kategori, harga, bahan, deskripsi, foto, harga_modal, keuntungan) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
                $stmt = $conn->prepare($query);
                $stmt->bind_param("ssdsssdd", $nama_menu, $kategori, $harga, $bahan, $deskripsi, $foto, $harga_modal, $keuntungan);
                
                $action_msg = "Menu berhasil ditambahkan";
                $log_action = "Menambahkan menu makanan baru: $nama_menu";
            }
            
            if (!$stmt->execute()) {
                throw new Exception("Error executing query: " . $stmt->error);
            }
            
            // Log aktivitas
            if (function_exists('logActivity')) {
                logActivity($_SESSION['user_id'], $log_action);
            }
            
            $conn->commit();
            
            // Set alert success
            $_SESSION['alert'] = [
                'type' => 'success',
                'message' => $action_msg
            ];
            
            // Redirect untuk refresh halaman
            header("Location: menu_makanan.php");
            exit;
        } catch (Exception $e) {
            $conn->rollback();
            $errors[] = "Error: " . $e->getMessage();
        }
    }
}

// Handle delete menu
if (isset($_GET['delete']) && !empty($_GET['delete'])) {
    $id_to_delete = $_GET['delete'];
    
    try {
        $conn->begin_transaction();
        
        // Ambil info foto sebelum dihapus
        $get_foto = $conn->prepare("SELECT foto, nama_menu FROM menu WHERE id_menu = ?");
        $get_foto->bind_param("i", $id_to_delete);
        $get_foto->execute();
        $foto_result = $get_foto->get_result();
        
        if ($foto_result->num_rows > 0) {
            $menu_data = $foto_result->fetch_assoc();
            $foto_to_delete = $menu_data['foto'];
            $menu_name = $menu_data['nama_menu'];
            
            // Hapus data dari database
            $delete_stmt = $conn->prepare("DELETE FROM menu WHERE id_menu = ?");
            $delete_stmt->bind_param("i", $id_to_delete);
            
            if (!$delete_stmt->execute()) {
                throw new Exception("Gagal menghapus menu: " . $delete_stmt->error);
            }
            
            // Hapus file foto jika ada
            if (!empty($foto_to_delete) && file_exists($uploadDir . $foto_to_delete)) {
                unlink($uploadDir . $foto_to_delete);
            }
            
            // Log aktivitas
            if (function_exists('logActivity')) {
                logActivity($_SESSION['user_id'], "Menghapus menu makanan: $menu_name");
            }
            
            $conn->commit();
            
            // Set alert success
            $_SESSION['alert'] = [
                'type' => 'success',
                'message' => "Menu berhasil dihapus"
            ];
        } else {
            throw new Exception("Menu tidak ditemukan");
        }
    } catch (Exception $e) {
        $conn->rollback();
        $_SESSION['alert'] = [
            'type' => 'danger',
            'message' => "Error: " . $e->getMessage()
        ];
    }
    
    // Redirect untuk refresh halaman
    header("Location: menu_makanan.php");
    exit;
}

// Handle edit menu (load data untuk edit)
if (isset($_GET['edit']) && !empty($_GET['edit'])) {
    $id_to_edit = $_GET['edit'];
    $edit_mode = true;
    
    $edit_query = $conn->prepare("SELECT * FROM menu WHERE id_menu = ?");
    $edit_query->bind_param("i", $id_to_edit);
    $edit_query->execute();
    $edit_result = $edit_query->get_result();
    
    if ($edit_result->num_rows > 0) {
        $menu_data = $edit_result->fetch_assoc();
        $id_menu = $menu_data['id_menu'];
        $nama_menu = $menu_data['nama_menu'];
        $harga = $menu_data['harga'];
        $bahan = $menu_data['bahan'];
        $deskripsi = $menu_data['deskripsi'];
        $foto = $menu_data['foto'];
        $harga_modal = $menu_data['harga_modal'];
        $keuntungan = $menu_data['keuntungan'];
        
        // Parse bahan untuk ditampilkan di form
        $bahan_items = [];
        $bahan_array = explode(',', $bahan);
        foreach ($bahan_array as $bahan_item) {
            $item_parts = explode(':', trim($bahan_item));
            if (count($item_parts) >= 2) {
                $nama_bahan = trim($item_parts[0]);
                $jumlah = floatval(trim($item_parts[1]));
                $bahan_items[] = [
                    'nama' => $nama_bahan,
                    'jumlah' => $jumlah
                ];
            }
        }
    } else {
        $_SESSION['alert'] = [
            'type' => 'danger',
            'message' => "Menu tidak ditemukan"
        ];
        header("Location: menu_makanan.php");
        exit;
    }
}

// Ambil semua data menu makanan
$menu_list = [];
$query = "SELECT * FROM menu WHERE kategori = 'makanan' ORDER BY nama_menu";

// Cek apakah tabel menu sudah ada
$table_check = $conn->query("SHOW TABLES LIKE 'menu'");
if ($table_check->num_rows > 0) {
    $result = $conn->query($query);
    if ($result && $result->num_rows > 0) {
        while ($row = $result->fetch_assoc()) {
            $menu_list[] = $row;
        }
    }
}
?>

<div class="ml-17 p-2">
    <div class="mb-6">
        <h1 class="text-2xl font-bold text-gray-700 flex items-center">
            <i class="fas fa-hamburger mr-2"></i> Data Menu Makanan
        </h1>
        <div class="flex items-center mt-2 text-sm">
            <a href="dashboard.php" class="text-blue-500 hover:text-blue-700">Dashboard</a>
            <span class="mx-2">></span>
            <span class="text-gray-600">Menu Makanan</span>
        </div>
    </div>
    
    <?php if (!empty($errors)): ?>
    <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
        <p class="font-bold">Terdapat kesalahan:</p>
        <ul class="list-disc list-inside">
            <?php foreach ($errors as $error): ?>
                <li><?= $error ?></li>
            <?php endforeach; ?>
        </ul>
    </div>
    <?php endif; ?>
    
    <?php if (isset($_SESSION['alert'])): ?>
    <div class="bg-<?= $_SESSION['alert']['type'] == 'success' ? 'green' : 'red' ?>-100 border-l-4 border-<?= $_SESSION['alert']['type'] == 'success' ? 'green' : 'red' ?>-500 text-<?= $_SESSION['alert']['type'] == 'success' ? 'green' : 'red' ?>-700 p-4 mb-6" role="alert">
        <p><?= $_SESSION['alert']['message'] ?></p>
    </div>
    <?php unset($_SESSION['alert']); ?>
    <?php endif; ?>
    
    <!-- Menu Listing -->
    <div class="bg-white p-5 rounded-lg shadow-sm border border-gray-100">
        <?php if ($edit_mode || isset($_GET['add'])): ?>
        <!-- Form Section -->
        <div class="mb-6">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-lg font-medium text-gray-800">
                    <?= $edit_mode ? 'Edit Menu' : 'Tambah Menu Baru' ?>
                </h2>
            </div>
            
            <?php if (!empty($errors)): ?>
                <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-4">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <i class="fas fa-exclamation-circle text-red-500"></i>
                        </div>
                        <div class="ml-3">
                            <h3 class="text-sm font-medium text-red-800">Ada beberapa error:</h3>
                            <div class="mt-2 text-sm text-red-700">
                                <ul class="list-disc pl-5 space-y-1">
                                    <?php foreach ($errors as $error): ?>
                                        <li><?= $error ?></li>
                                    <?php endforeach; ?>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            <?php endif; ?>
            
            <form id="menuForm" method="POST" action="" enctype="multipart/form-data" class="mt-4">
                <?php if (isset($edit_mode) && $edit_mode): ?>
                <input type="hidden" name="id_menu" value="<?= $id_menu ?>">
                <?php endif; ?>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="mb-4">
                        <label for="nama_menu" class="block text-gray-700 text-sm font-medium mb-2">Nama Menu</label>
                        <input type="text" id="nama_menu" name="nama_menu" value="<?= htmlspecialchars($nama_menu) ?>" required 
                               class="shadow-sm border border-gray-300 rounded-md w-full py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    </div>
                    
                    <div class="mb-4">
                        <label for="harga" class="block text-gray-700 text-sm font-medium mb-2">Harga Jual</label>
                        <div class="relative">
                            <span class="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-600">
                                Rp
                            </span>
                            <input type="number" id="harga" name="harga" value="<?= $harga ?>" required min="0" step="100"
                                   class="shadow-sm border border-gray-300 rounded-md w-full py-2 pl-10 pr-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="mb-4">
                        <label for="harga_modal" class="block text-gray-700 text-sm font-medium mb-2">Harga Modal (otomatis)</label>
                        <div class="relative">
                            <span class="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-600">
                                Rp
                            </span>
                            <input type="number" id="harga_modal" name="harga_modal" value="<?= $harga_modal ?>" readonly
                                   class="shadow-sm border border-gray-300 bg-gray-100 rounded-md w-full py-2 pl-10 pr-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                    </div>
                    
                    <div class="mb-4">
                        <label for="keuntungan" class="block text-gray-700 text-sm font-medium mb-2">Keuntungan (otomatis)</label>
                        <div class="relative">
                            <span class="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-600">
                                Rp
                            </span>
                            <input type="number" id="keuntungan" name="keuntungan" value="<?= $keuntungan ?>" readonly
                                   class="shadow-sm border border-gray-300 bg-gray-100 rounded-md w-full py-2 pl-10 pr-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                    </div>
                </div>
                
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-medium mb-2">Bahan-bahan</label>
                    <div id="bahanContainer" class="mb-2 border border-gray-300 rounded-md p-3 bg-gray-50">
                        <!-- Bahan items will be added here -->
                    </div>
                    <input type="hidden" id="bahanInput" name="bahan" value="<?= htmlspecialchars($bahan) ?>">
                    <button type="button" id="addBahanBtn" class="bg-blue-500 hover:bg-blue-600 text-white py-1 px-3 rounded-md text-sm transition-colors duration-200">
                        <i class="fas fa-plus mr-1"></i> Tambah Bahan
                    </button>
                </div>
                
                <div class="mb-4">
                    <label for="deskripsi" class="block text-gray-700 text-sm font-medium mb-2">Deskripsi</label>
                    <textarea id="deskripsi" name="deskripsi" rows="3" 
                           class="shadow-sm border border-gray-300 rounded-md w-full py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"><?= htmlspecialchars($deskripsi) ?></textarea>
                </div>
                
                <div class="mb-4">
                    <label for="foto" class="block text-gray-700 text-sm font-medium mb-2">Foto Menu</label>
                    <?php if (!empty($foto) && file_exists($uploadDir . $foto)): ?>
                    <div class="mb-2">
                        <img src="<?= $uploadDir . $foto ?>" alt="<?= htmlspecialchars($nama_menu) ?>" class="w-32 h-32 object-cover rounded-md border">
                        <p class="text-sm text-gray-600">Foto saat ini: <?= $foto ?></p>
                    </div>
                    <?php endif; ?>
                    <input type="file" id="foto" name="foto" accept="image/*" 
                           class="shadow-sm border border-gray-300 rounded-md w-full py-2 px-3 text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <p class="text-xs text-gray-500 mt-1">Format: JPG, JPEG, PNG, GIF. Ukuran max: 2MB.</p>
                </div>
                
                <div class="flex justify-end space-x-2 mt-6">
                    <a href="menu_makanan.php" class="bg-gray-500 hover:bg-gray-600 text-white py-2 px-4 rounded-md text-sm transition-colors duration-200">
                        Batal
                    </a>
                    <button type="submit" name="submit_menu" class="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-md text-sm transition-colors duration-200">
                        <?= isset($edit_mode) && $edit_mode ? 'Update Menu' : 'Simpan Menu' ?>
                    </button>
                </div>
            </form>
        </div>
        <?php else: ?>
        <!-- Display menu list -->
        <div>
            <div class="flex flex-col md:flex-row justify-between items-center mb-6">
                <h2 class="text-lg font-medium text-gray-800 mb-2 md:mb-0">Daftar Menu Makanan</h2>
                
                <div class="flex flex-col md:flex-row md:space-x-3 w-full md:w-auto">
                    <div class="mb-2 md:mb-0 flex-grow md:flex-grow-0">
                        <div class="relative">
                            <span class="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-600">
                                <i class="fas fa-search"></i>
                            </span>
                            <input type="text" id="searchInput" placeholder="Cari menu..." 
                                   class="border border-gray-300 bg-gray-50 rounded-md py-2 pl-10 pr-3 w-full md:w-64 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                        </div>
                    </div>
                    
                    <div class="flex space-x-2 items-center">
                        <select id="itemsPerPage" class="border border-gray-300 bg-gray-50 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm">
                            <option value="16">16 per halaman</option>
                            <option value="32">32 per halaman</option>
                            <option value="48">48 per halaman</option>
                            <option value="all">Tampilkan semua</option>
                        </select>
                        
                        <a href="menu_makanan.php?add=1" class="bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-md text-sm transition-colors duration-200">
                            <i class="fas fa-plus mr-1"></i> Tambah Menu
                        </a>
                    </div>
                </div>
            </div>
            
            <?php if (empty($menu_list)): ?>
            <div class="text-center py-8">
                <div class="text-gray-500 mb-3">
                    <i class="fas fa-utensils text-6xl"></i>
                </div>
                <h3 class="text-lg font-medium text-gray-800 mb-2">Belum ada menu makanan</h3>
                <p class="text-gray-600 mb-6">Mulai tambahkan menu makanan untuk ditampilkan di sini.</p>
                <a href="menu_makanan.php?add=1" class="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-md text-sm transition-colors duration-200">
                    <i class="fas fa-plus mr-1"></i> Tambah Menu Sekarang
                </a>
            </div>
            <?php else: ?>
            <!-- Menu Grid -->
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                <?php foreach ($menu_list as $menu): ?>
                <div class="menu-card bg-white rounded-xl shadow-sm overflow-hidden border border-gray-100 hover:shadow-md transition-all duration-300">
                    <div class="relative h-48">
                        <?php if (!empty($menu['foto']) && file_exists($uploadDir . $menu['foto'])): ?>
                        <img src="<?= $uploadDir . $menu['foto'] ?>" alt="<?= htmlspecialchars($menu['nama_menu']) ?>" class="w-full h-full object-cover">
                        <?php else: ?>
                        <div class="w-full h-full bg-gray-200 flex items-center justify-center">
                            <i class="fas fa-utensils text-gray-400 text-5xl"></i>
                        </div>
                        <?php endif; ?>
                        <div class="absolute top-2 right-2 bg-green-500 text-white rounded-full px-3 py-1 text-sm font-bold shadow-md">
                            <?= formatRupiah($menu['harga']) ?>
                        </div>
                    </div>
                    
                    <div class="p-4">
                        <h3 class="text-lg font-semibold text-gray-800 mb-2"><?= htmlspecialchars($menu['nama_menu']) ?></h3>
                        
                        <div class="mb-3">
                            <p class="text-gray-600 text-sm"><span class="font-medium">Bahan:</span> <?= htmlspecialchars($menu['bahan']) ?></p>
                            <?php if (!empty($menu['deskripsi'])): ?>
                            <p class="text-gray-600 text-sm mt-1"><span class="font-medium">Deskripsi:</span> <?= htmlspecialchars($menu['deskripsi']) ?></p>
                            <?php endif; ?>
                        </div>
                        
                        <div class="border-t pt-3 text-sm">
                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-600 font-medium">Harga Modal:</span>
                                <span class="text-sm font-semibold text-gray-700"><?= formatRupiah($menu['harga_modal']) ?></span>
                            </div>
                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-600 font-medium">Harga Jual:</span>
                                <span class="text-sm font-semibold text-green-600"><?= formatRupiah($menu['harga']) ?></span>
                            </div>
                            <div class="flex justify-between items-center">
                                <span class="text-sm text-gray-600 font-medium">Keuntungan:</span>
                                <span class="text-sm font-semibold text-blue-600"><?= formatRupiah($menu['keuntungan']) ?></span>
                            </div>
                            <div class="flex justify-between items-center mt-1">
                                <span class="text-sm text-gray-600 font-medium">Persentase:</span>
                                <?php 
                                $persentase = 0;
                                if ($menu['harga_modal'] > 0) {
                                    $persentase = ($menu['keuntungan'] / $menu['harga_modal']) * 100;
                                }
                                ?>
                                <span class="text-sm font-semibold <?= $persentase >= 30 ? 'text-green-600' : 'text-yellow-600' ?>"><?= number_format($persentase, 1) ?>%</span>
                            </div>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="flex justify-end mt-2 space-x-2">
                            <a href="menu_makanan.php?edit=<?= $menu['id_menu'] ?>" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded-md text-sm transition-colors duration-200">
                                <i class="fas fa-edit mr-1"></i> Edit
                            </a>
                            <button onclick="confirmDelete(<?= $menu['id_menu'] ?>, '<?= htmlspecialchars($menu['nama_menu']) ?>')" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded-md text-sm transition-colors duration-200">
                                <i class="fas fa-trash mr-1"></i> Hapus
                            </button>
                        </div>
                    </div>
                </div>
                <?php endforeach; ?>
            </div>
            
            <!-- Pagination -->
            <div class="mt-6 flex justify-between items-center">
                <div class="text-sm text-gray-600">
                    Menampilkan <span id="startItem">1</span> sampai <span id="endItem"><?= min(16, count($menu_list)) ?></span> dari <span id="totalItems"><?= count($menu_list) ?></span> entri
                </div>
                
                <div class="flex space-x-1">
                    <button id="prevPage" class="px-3 py-1 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed">
                        <i class="fas fa-chevron-left"></i>
                    </button>
                    <div id="pagination" class="flex space-x-1">
                        <!-- Pagination buttons will be generated here -->
                    </div>
                    <button id="nextPage" class="px-3 py-1 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 disabled:opacity-50 disabled:cursor-not-allowed">
                        <i class="fas fa-chevron-right"></i>
                    </button>
                </div>
            </div>
            <?php endif; ?>
        </div>
        <?php endif; ?>
    </div>
</div>

<!-- Modal Konfirmasi Hapus -->
<div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white p-6 rounded-xl shadow-2xl max-w-sm w-full transform transition-all duration-300 scale-90 opacity-0" id="deleteModalContent">
        <h3 class="text-xl font-bold text-gray-800 mb-4">Konfirmasi Hapus</h3>
        <p class="text-gray-700 mb-6">Apakah Anda yakin ingin menghapus menu <span id="menuToDelete" class="font-semibold"></span>? Tindakan ini tidak dapat dibatalkan.</p>
        <div class="flex justify-end">
            <button id="cancelDeleteBtn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-4 py-2 rounded-lg mr-2 transition-colors duration-200">
                Batal
            </button>
            <a id="confirmDeleteBtn" href="#" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg transition-colors duration-200">
                Hapus
            </a>
        </div>
    </div>
</div>

<!-- Modal Detail Menu -->
<div id="detailModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-xl shadow-2xl max-w-4xl w-full transform transition-all duration-300 scale-90 opacity-0" id="modalContent">
        <div class="flex justify-between items-center p-6 border-b">
            <h3 class="text-2xl font-bold text-gray-800" id="detailTitle">Detail Menu</h3>
            <button id="closeDetailBtn" class="text-gray-500 hover:text-gray-700 focus:outline-none transition-transform hover:rotate-90 duration-300">
                <i class="fas fa-times text-xl"></i>
            </button>
        </div>
        <div class="p-6" id="detailContent">
            <!-- Content will be filled dynamically -->
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Variables for pagination
    let currentPage = 1;
    let itemsPerPage = 16;
    let menuItems = Array.from(document.querySelectorAll('.menu-card'));
    let totalItems = menuItems.length;
    
    // Initialize
    updatePagination();
    showCurrentPage();
    
    // Search functionality
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        
        menuItems.forEach(item => {
            const menuName = item.querySelector('h3').textContent.toLowerCase();
            const menuDesc = item.querySelector('.text-gray-600')?.textContent.toLowerCase() || '';
            
            if (menuName.includes(searchTerm) || menuDesc.includes(searchTerm)) {
                item.classList.remove('hidden');
            } else {
                item.classList.add('hidden');
            }
        });
        
        // Reset pagination after search
        currentPage = 1;
        menuItems = Array.from(document.querySelectorAll('.menu-card:not(.hidden)'));
        totalItems = menuItems.length;
        updatePagination();
        showCurrentPage();
    });
    
    // Items per page change
    const itemsPerPageSelect = document.getElementById('itemsPerPage');
    itemsPerPageSelect.addEventListener('change', function() {
        if (this.value === 'all') {
            itemsPerPage = totalItems;
        } else {
            itemsPerPage = parseInt(this.value);
        }
        
        currentPage = 1;
        updatePagination();
        showCurrentPage();
    });
    
    // Previous page button
    document.getElementById('prevPage').addEventListener('click', function() {
        if (currentPage > 1) {
            currentPage--;
            updatePagination();
            showCurrentPage();
        }
    });
    
    // Next page button
    document.getElementById('nextPage').addEventListener('click', function() {
        if (currentPage < Math.ceil(totalItems / itemsPerPage)) {
            currentPage++;
            updatePagination();
            showCurrentPage();
        }
    });
    
    // Function to update pagination
    function updatePagination() {
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        const paginationContainer = document.getElementById('pagination');
        paginationContainer.innerHTML = '';
        
        // Update prev/next button states
        document.getElementById('prevPage').disabled = currentPage === 1;
        document.getElementById('nextPage').disabled = currentPage === totalPages || totalPages === 0;
        
        // Create page buttons
        let startPage = Math.max(1, currentPage - 2);
        let endPage = Math.min(totalPages, startPage + 4);
        
        if (endPage - startPage < 4) {
            startPage = Math.max(1, endPage - 4);
        }
        
        for (let i = startPage; i <= endPage; i++) {
            const pageButton = document.createElement('button');
            pageButton.textContent = i;
            pageButton.className = `px-3 py-1 rounded-md ${i === currentPage ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`;
            pageButton.addEventListener('click', function() {
                currentPage = i;
                updatePagination();
                showCurrentPage();
            });
            paginationContainer.appendChild(pageButton);
        }
        
        // Update info text
        const startItem = totalItems === 0 ? 0 : (currentPage - 1) * itemsPerPage + 1;
        const endItem = Math.min(currentPage * itemsPerPage, totalItems);
        
        document.getElementById('startItem').textContent = startItem;
        document.getElementById('endItem').textContent = endItem;
        document.getElementById('totalItems').textContent = totalItems;
    }
    
    // Function to show current page
    function showCurrentPage() {
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        
        menuItems.forEach((item, index) => {
            if (index >= startIndex && index < endIndex) {
                item.classList.remove('hidden');
            } else {
                item.classList.add('hidden');
            }
        });
    }
    
    // Detail modal functionality
    const detailModal = document.getElementById('detailModal');
    const modalContent = document.getElementById('modalContent');
    
    // Show detail modal when clicking on a card
    document.querySelectorAll('.menu-card').forEach(card => {
        card.addEventListener('click', function(e) {
            // Ignore clicks on buttons inside the card
            if (e.target.closest('a, button')) return;
            showDetailModal(this);
        });
    });
    
    // Close detail modal when clicking the close button
    document.getElementById('closeDetailBtn').addEventListener('click', function() {
        modalContent.classList.remove('scale-100', 'opacity-100');
        modalContent.classList.add('scale-90', 'opacity-0');
        
        setTimeout(() => {
            detailModal.classList.add('hidden');
        }, 300);
    });
    
    // Close detail modal when clicking outside
    detailModal.addEventListener('click', function(e) {
        if (e.target === this) {
            document.getElementById('closeDetailBtn').click();
        }
    });
    
    // Form handling for bahan-bahan
    const bahanContainer = document.getElementById('bahanContainer');
    const bahanInput = document.getElementById('bahanInput');
    const addBahanBtn = document.getElementById('addBahanBtn');
    const hargaInput = document.getElementById('harga');
    const hargaModalInput = document.getElementById('harga_modal');
    const keuntunganInput = document.getElementById('keuntungan');
    
    // Add bahan button
    if (addBahanBtn) {
        addBahanBtn.addEventListener('click', function() {
            addBahanItem();
        });
        
        // Initialize bahan items if we have existing value
        const existingBahan = bahanInput.value;
        if (existingBahan) {
            const bahanItems = existingBahan.split(',');
            bahanItems.forEach(item => {
                const parts = item.split(':');
                if (parts.length >= 2) {
                    const nama = parts[0].trim();
                    const jumlah = parts[1].trim();
                    addBahanItem(nama, jumlah);
                }
            });
        } else {
            // Add an empty bahan item if there are none
            addBahanItem();
        }
    }
    
    // Function to add a bahan item to the form
    function addBahanItem(selectedBahan = '', selectedQty = '') {
        const bahanItem = document.createElement('div');
        bahanItem.className = 'bahan-item flex items-center space-x-2 mb-2';
        
        bahanItem.innerHTML = `
            <select class="bahan-select shadow-sm border border-gray-300 rounded-md flex-grow py-2 px-3 text-gray-700 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                <option value="">Pilih Bahan</option>
                ${barangOptions}
            </select>
            <div class="flex items-center w-1/3">
                <input type="number" class="bahan-qty shadow-sm border border-gray-300 rounded-l-md w-full py-2 px-3 text-gray-700 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" value="${selectedQty}" min="0.01" step="0.01" placeholder="Qty">
                <span class="bahan-satuan inline-flex items-center px-3 py-2 rounded-r-md border border-l-0 border-gray-300 bg-gray-50 text-gray-500 text-sm"></span>
            </div>
            <button type="button" class="remove-bahan text-red-500 hover:text-red-700">
                <i class="fas fa-times"></i>
            </button>
        `;
        
        bahanContainer.appendChild(bahanItem);
        
        // Setup event listeners
        setupBahanItem(bahanItem);
        
        // Set the selected bahan if provided
        if (selectedBahan) {
            const select = bahanItem.querySelector('.bahan-select');
            for (let i = 0; i < select.options.length; i++) {
                if (select.options[i].textContent.trim() === selectedBahan) {
                    select.selectedIndex = i;
                    // Trigger change event to update satuan
                    const event = new Event('change');
                    select.dispatchEvent(event);
                    break;
                }
            }
        }
    }
    
    // Function to setup bahan item event listeners
    function setupBahanItem(item) {
        const select = item.querySelector('.bahan-select');
        const qtyInput = item.querySelector('.bahan-qty');
        const satuanSpan = item.querySelector('.bahan-satuan');
        const removeBtn = item.querySelector('.remove-bahan');
        
        // Update satuan when select changes
        select.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            if (selectedOption.value) {
                satuanSpan.textContent = selectedOption.dataset.satuan;
            } else {
                satuanSpan.textContent = '';
            }
            updateBahanInput();
            calculateHargaModal();
        });
        
        // Update bahan input when qty changes
        qtyInput.addEventListener('input', function() {
            updateBahanInput();
            calculateHargaModal();
        });
        
        // Remove bahan item
        removeBtn.addEventListener('click', function() {
            item.remove();
            updateBahanInput();
            calculateHargaModal();
        });
    }
    
    // Function to update hidden bahan input
    function updateBahanInput() {
        const bahanItems = document.querySelectorAll('.bahan-item');
        const bahanValues = [];
        
        bahanItems.forEach(item => {
            const select = item.querySelector('.bahan-select');
            const qtyInput = item.querySelector('.bahan-qty');
            
            if (select.value && qtyInput.value) {
                const selectedOption = select.options[select.selectedIndex];
                const nama = selectedOption.textContent.trim();
                const jumlah = qtyInput.value.trim();
                bahanValues.push(`${nama}:${jumlah}`);
            }
        });
        
        bahanInput.value = bahanValues.join(', ');
    }
    
    // Function to calculate harga modal
    function calculateHargaModal() {
        let totalModal = 0;
        const bahanItems = document.querySelectorAll('.bahan-item');
        
        bahanItems.forEach(item => {
            const select = item.querySelector('.bahan-select');
            const qtyInput = item.querySelector('.bahan-qty');
            
            if (select.value && qtyInput.value) {
                const selectedOption = select.options[select.selectedIndex];
                const harga = parseFloat(selectedOption.dataset.harga || 0);
                const jumlah = parseFloat(qtyInput.value || 0);
                
                if (!isNaN(harga) && !isNaN(jumlah)) {
                    totalModal += harga * jumlah;
                }
            }
        });
        
        // Update harga modal input
        if (hargaModalInput) {
            hargaModalInput.value = totalModal.toFixed(0);
            // Trigger calculation of profit
            calculateKeuntungan();
        }
    }
    
    // Function to calculate keuntungan
    function calculateKeuntungan() {
        if (hargaInput && hargaModalInput && keuntunganInput) {
            const hargaJual = parseFloat(hargaInput.value || 0);
            const hargaModal = parseFloat(hargaModalInput.value || 0);
            const keuntungan = hargaJual - hargaModal;
            
            keuntunganInput.value = keuntungan.toFixed(0);
        }
    }
    
    // Calculate keuntungan when harga jual changes
    if (hargaInput) {
        hargaInput.addEventListener('input', calculateKeuntungan);
    }
    
    // Initial calculations
    if (bahanContainer && bahanInput) {
        setTimeout(calculateHargaModal, 100); // Delay to ensure DOM is fully processed
    }
});
</script>
</rewritten_file>